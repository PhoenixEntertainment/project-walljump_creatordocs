{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About section creation","text":"<p>Interested in creating sections for Super Skyward Towers? This is the right place to be!</p> <p>These documentation pages are currently a work in progress, so please head over to section documentation to get started.</p>"},{"location":"#creators-kit","title":"Creator's kit","text":"<p>You can get the creator's kit here : SST_SectionCreatorKit.rbxm</p>"},{"location":"Obstacle%20Documentation/","title":"Obstacles","text":"<p>In Super Skyward Towers, there are various obstacles that players encounter in each section. These obstacles are what create the difficulty and challenge while beating a section. Often, obstacles are combined together to create new &amp; unique obstacle types! Spinning rotating flamethrowers, moving flipswitches, quicksand pits, and more! There aren't a lot of creative limits on what types of obstacles you can make!</p> <p>Ready to use obstacles? Head over to Conveyors to get started.</p>"},{"location":"Obstacle%20Documentation/Conveyors/","title":"Conveyors","text":"<p>Conveyors are a part that moves the player along with them, like a conveyor belt. They are a normal Part with a beam particle and an IntValue parented to them. The <code>IntValue</code> is used to control the speed of the conveyor. The higher the value, the faster the conveyor goes.</p> <p>Rig:</p> <p></p> <p>Requirements</p> <ul> <li>The beam particle must be the one that's provided in the example below or the creator's kit. Custom beam particles are not allowed at this time.</li> <li>The conveyor must have a tag of \"Conveyor\"</li> </ul> <p>Example : ExampleConveyor.rbxm</p>"},{"location":"Obstacle%20Documentation/DamageParts/","title":"Damage Parts","text":"<p>Damage parts are a normal BasePart that deals damage to a player if their hitbox comes into contact with it. If the damage part has the tag <code>Hurt</code>, it will deal 1 heart of damage to the player. If the damage part has the tag <code>Kill</code>, it will instantly kill the player.</p> <p>Additionally, a special string attribute named <code>KillType</code> can be applied to the damage part, which will trigger its corresponding hurt / death effect when the player touches it. If this attribute is not present, standard death &amp; hurt animations will be ran instead.</p> <p>The following damage types are available for <code>Hurt</code> parts:</p> <ul> <li><code>Frozen</code> : The player's avatar will be bounced up a bit while slowly flailing its arms and legs from the cold.</li> <li><code>Lava</code> : The player's avatar will be bounced up a bit while quickly flailing its arms and legs from the burn.</li> </ul> <p>The following damage types are available for <code>Kill</code> parts:</p> <ul> <li><code>Eaten</code> : The player's avatar will flail around a bit as it moves down into whatever is swallowing it, then ragdoll</li> <li><code>Electrocuted</code> : The player's avatar will rapidly seize in-place as its skeleton flashes visible, then ragdoll</li> <li><code>Falling</code> : The player's avatar will enter an uncontrolled fall animation. If the player hits the ground before a respawn is initiated, certain accessories such as shoes will fly off of the avatar and bounce up to the camera while the avatar faceplants.</li> <li><code>Frozen</code> : The player's avatar will become encased in a cube of ice that will float to the surface of the damage part, and it will bob there until a respawn is initiated.</li> <li><code>Portfish</code> : A giant portfish will jump out of the surface of the damage part and swallow the player. The portfish will then swim back to underneath the surface.</li> <li><code>Squished</code> : The player's avatar will be flattened while a \"SQUARSH!\" sound plays. The avatar will then ragdoll.</li> <li><code>WaterDrown</code> : The player's avatar will grab its neck and struggle for breathable air. The avatar will then go limp forward while floating in place.</li> <li><code>Lava</code> : The player's avatar will be lit on fire as it quickly flails its arms and legs from the burn. The avatar is bounced upwards, and will then fall downwards, noclipping through anything in its path.</li> <li><code>Poison</code> : The player's avatar will either immediately go limp, or it will flail around struggling to stay above the surface only to go limp after. The avatar will then slowly sink beneath the surface.</li> </ul> <p>Requirements</p> <ul> <li>The damage part must have a tag of <code>Hurt</code> or <code>Kill</code></li> <li>The damage part must not have any textures applied to it, the animated damage textures will be added at runtime by the game if applicable.</li> <li>The damage part must have a transparency of 0 if it has the tag <code>Hurt</code>.</li> <li>The damage part must have a material of <code>Neon</code> if it has the tag <code>Hurt</code>.</li> </ul> <p>Example : ExampleLava.rbxm</p>"},{"location":"Obstacle%20Documentation/DisappearingPlatformSequences/","title":"Disappearing platform sequences","text":"<p>Disappearing platform sequences are a Model containing numbered sub-<code>model</code>s, which contain sets of Parts that disappear and reappear in an ordered sequence, with a NumberValue parented to the root which controls the delay between appearing and disappearing.</p> <p>The sets of parts will appear and disappear in numerical order, with <code>1</code> appearing &amp; disappearing first, then <code>2</code> appearing, etc until the end of the sequence.</p> <p>Rig:</p> <p></p> <p>Requirements</p> <ul> <li>The disappearing platform sequence must have a tag of \"DisappearingPlatforms\"</li> <li>The disappearing platform sequence must contain at least one sequence model</li> <li>The sequence models must be named a number, and must be in numerical order (e.g. you cannot have only <code>1</code> and <code>3</code>, there must be a <code>2</code> present as well)</li> <li>The platform parts cannot have any textures applied to them, the textures will be applied at runtime by the game</li> <li>The platform parts must have a partshape of <code>Block</code></li> </ul> <p>Example : ExampleDisappearingPlatforms.rbxm</p>"},{"location":"Obstacle%20Documentation/FallingPlatforms/","title":"Falling platforms","text":"<p>Falling platforms are a Part with a beam particle and a crack decal that shakes &amp; falls upon being stepped on by a player with a particle and texture parented to them. The delay before falling &amp; speed of the fall cannot be custom-defined at this time.</p> <p>Rig:</p> <p></p> <p>Requirements:</p> <ul> <li>The falling platform must have a tag of \"FallingPlatform\"</li> <li>The texture &amp; particles must be the ones that are provided in the example below. Custom particles &amp; crack textures are not allowed at this time.</li> <li>The particle must match the color of the falling platform.</li> <li>Falling platforms must be anchored</li> <li>Falling platforms cannot be moved (e.g. they cannot be a projectile)</li> </ul> <p>Example : ExampleFallingPlatforms.rbxm</p>"},{"location":"Obstacle%20Documentation/FlipSwitches/","title":"Flip switches","text":"<p>Flipswitches are a Model with a <code>PrimaryPart</code>, which contains a HingeConstraint to flip its associated physics assembly back and forth when a player performs a singlejump.</p> <p>Requirements:</p> <ul> <li>Custom switch panels are not allowed at this time. The switch panel from the creator's kit must be used.</li> </ul> <p>Example: ExampleSwitchPanel.rbxm</p>"},{"location":"Obstacle%20Documentation/MovingPlatforms/","title":"Moving platforms","text":"<p>Moving platforms are a Model containing a Part that moves between two node Parts. The main platform part contains an IntValue to control the platform's speed, and a NumberValue to control the delay between move.</p> <p>Rig:</p> <p></p> <p>Requirements:</p> <ul> <li>The moving platform's model must have a tag of \"MovingPlatform\"</li> <li>The two node parts must be anchored and invisible</li> <li>The two node parts cannot move (e.g. they cannot be a projectile)</li> <li>The primary platform part must be anchored, it will be unanchored at runtime by the game</li> <li>The primary platform cannot be moved by another obstacle (e.g. they cannot be a projectile)</li> <li>The beam particle from the example must be present in the model and linking the two nodes together</li> <li>The first node part must be named \"One\"</li> <li>The second node part must be named \"Two\"</li> </ul> <p>Example: ExampleMovingPlatforms.rbxm</p>"},{"location":"Obstacle%20Documentation/ProjectileGroups/","title":"Projectile groups","text":"<p>Projectile groups are a Model containing sub-<code>model</code>s, which contain a BasePart that is created at a point, and then translated away in a specific direction at a certain speed for some time. The delay before firing, the projectile speed and how far it goes (in studs) are determined by NumberValue instances parented to the primary projectile part.</p> <p>Rig:</p> <p></p> <p>Requirements:</p> <ul> <li>The projectilegroup model must have a tag of \"ProjectileGroup\"</li> <li>The projectiles inside of the projectilegroup model must have a BasePart named \"Start\". This part must be anchored and must be CFramed to face the direction you want the projectile to move in.</li> <li>The projectile must be named \"Main\"</li> <li>The projectile must be anchored</li> </ul> <p>Example: ExampleProjectiles.rbxm</p>"},{"location":"Obstacle%20Documentation/Spinners/","title":"Spinners","text":"<p>Spinners are a Model containing a physics assembly that relies on HingeConstraints to keep the assembly together &amp; spinning. Unlike most obstacles, spinners have no structure requirements, other than the root being a model, and there being at least one <code>HingeConstraint</code> existing as a descendent of the model.</p> <p>Requirements:</p> <ul> <li>The spinner's model must have a tag of \"SpinnerRig\"</li> </ul> <p>Example: ExampleSpinners.rbxm</p>"},{"location":"Obstacle%20Documentation/TeleporterGroups/","title":"Teleporter groups","text":"<p>Teleporter groups are a Model containing a set of sub-<code>model</code>s that represent nodes in the teleporter group.</p> <p>Nodes have different modes that can be configured with attributes. The two modes are <code>Sender</code> and <code>Receiver</code>. If a node is configured as a <code>Sender</code>, it must have an additional attribute named <code>DestinationName</code>. The <code>DestinationName</code>'s value must exactly match the name of another node model in the teleportergroup. Upon being touched by a player, the player will be teleported to the destination node. If a node is configured as a <code>Receiver</code>, it will simply do nothing upon being touched by a player.</p> <p>Two-way teleports are supported. If a <code>Sender</code> sends the player to another <code>Sender</code>, the receiving sender will be disabled until the player steps off of the node.</p> <p>Rig:</p> <p></p> <p>Requirements:</p> <ul> <li>Teleporter nodes must be copied from the creator's kit. Custom-built teleporter nodes are not allowed at this time.</li> <li>Teleporter nodes must be anchored</li> <li>Teleporter nodes cannot move (e.g. they cannot be a projectile)</li> </ul> <p>Example: ExampleTeleporterGroup.rbxm</p>"},{"location":"Obstacle%20Documentation/Trampolines/","title":"Trampolines","text":"<p>Trampolines are a BasePart that bounces the player upwards upon being stepped on. The height that the player is bounced is configured by a IntValue parented to the trampoline's part.</p> <p>Rig:</p> <p></p> <p>Requirements:</p> <ul> <li>Trampolines must be copied from the creator's kit. Custom trampoline shapes / models are not allowed at this time</li> </ul> <p>Example: ExampleTrampoline.rbxm</p>"},{"location":"Section%20Documentation/","title":"Artstyle standards","text":"<p>Super Skyward Towers has a very simplistic art style, we use standard Roblox materials and very few custom textures save for section walls.</p> <ul> <li>Try to use slightly lighter colors for platforms than section walls if they are the same color, this way things are not hard to see for players. Sections do not have to use all of the same color! Both images below are good examples!</li> </ul> <p> </p>"},{"location":"Section%20Documentation/Difficulty/","title":"Section difficulty","text":"<p>Note</p> <p>We are only accepting <code>Easy</code> sections at this time!</p> <p>Different section difficulties have different standards. These standards are how we quantify what the difficulty of a section is. The standards apply in a top-down fashion, from harder difficulty to easier difficulty. For example, if hard sections have a standard saying \"conveyors cannot have a speed value above 40\", then that standard would apply to hard sections and all difficulties below hard (such as medium).</p>"},{"location":"Section%20Documentation/Difficulty/#impossible-and-below","title":"Impossible and below","text":"<ul> <li>The developers must be able to beat the section consistently given practice</li> <li>Avoid artificial difficulty! Some examples of artificial difficulty include:<ul> <li>Super thin platforms (like 1x1x1 studs,)</li> <li>Tricking the player by adding kill parts they won\u2019t be able to see, non-collidable platforms that are fully opaque</li> <li>Obstacles that can only be overcome by abusing glitches or requiring certain avatar sizes</li> </ul> </li> <li>In <code>Impossible</code> sections only, obstacles must require precise timing of your avatar's movements</li> <li>The section must play and flow like a \"platformer\" level, not a roblox obby or flood escape 2 level</li> <li>Platforms must have a minimum standing width of 10x10 studs, and a minimum height of 1 stud</li> </ul> <ul> <li>Shortcuts / multiple routes are allowed and encouraged, they should be slightly harder than the difficulty they are in, for example if a major shortcut appears in an easy section, it should be medium. In the example below, players are able to go left or right, with the right side being the shortcut:</li> </ul> <ul> <li>We permit courses that go outside their section using teleporters, these course models CANNOT exceed the height of their parent section. If the section walls are 500 studs high, the height of the part outside the section should be a maximum of 500 studs as well!</li> </ul> <ul> <li>Similar to above, we allow SECRET shortcuts that go outside the tower, the idea is that you hide a teleporter somewhere in the course that takes the player outside the section to a course that is 1-2 tier(s) higher in difficulty than the parent section, but is able to be completed much faster with skill. For example, a secret course inside an easy section should be medium to hard. The teleporter to the secret should be well hidden!</li> </ul> <ul> <li>No damage parts directly on top of ladders and fences, you must add a barrier between the top of the ladder/fence and the damage part if you want one on top:</li> </ul>"},{"location":"Section%20Documentation/Difficulty/#rage-inducing-and-below","title":"Rage inducing and below","text":"<ul> <li>Obstacles must have a noticably slower speed than obstacles found in <code>Impossible</code> sections</li> <li>The section must be the size of a \"standard\" section, smaller than roughly half of a large <code>Impossible</code> section</li> </ul>"},{"location":"Section%20Documentation/Difficulty/#hard-and-below","title":"Hard and below","text":"<ul> <li>Obstacles can't require strict / precise timing of movements IF that results in the player falling (being damaged for failure of precise movements is OK)</li> <li>The section's segments connecting the stationary / \"rest\" platforms must be shorter in length than those found in <code>Rage inducing</code> sections</li> <li>The section's segments connecting the stationary / \"rest\" platforms must have a noticably lower chance of making the player fall than those found in <code>Rage inducing</code> sections</li> </ul>"},{"location":"Section%20Documentation/Difficulty/#medium-and-below","title":"Medium and below","text":"<ul> <li>The player should be guided on where to go (e.g. signs pointing to the easiest possbile paths), the level flow should be noticably linear</li> </ul> <ul> <li>The player should not be required to do complex movements (e.g. doublejumping in midair underneath a barrier to get to the other side of it)</li> <li>Obstacles should be noticably slower than obstacles found in <code>Hard</code> sections</li> <li>Any danger present (falling, getting hurt, etc) should be easily avoidable to a novice player</li> </ul>"},{"location":"Section%20Documentation/Difficulty/#easy-and-below","title":"Easy and below","text":"<ul> <li>If ice is present, it cannot require precision of movement</li> <li>Obstacle types cannot be combined, they must be standalone. This should be kept simple as we are trying to introduce players to obstacles rather than really challenge them. </li> </ul> <ul> <li>Walljumps should have a platform underneath them to catch players from falling</li> </ul> <ul> <li>Obstacles should be noticably slower than those found in <code>Medium</code> sections</li> <li>Any danger present (falling, getting hurt) should be easily avoidable to new players with minimal experience in the game</li> </ul>"},{"location":"Section%20Documentation/Difficulty/#cakewalk","title":"Cakewalk","text":"<ul> <li>There should be NO danger of falling too far back in the section. Falling should at most make the player lose a few seconds of their time</li> <li>Any fall hazards should not also hurt the player upon landing (e.g. player should not be able to fall into a lava pit with a harder escape)</li> <li>Any danger (falling, getting hurt) should be avoidable by players with absolutely no experience in the game</li> <li>The section should be designed like that of an intro mario level - big platforms, a fun linear level flow, barely \"tower\" like (external section segments via teleporters are a great use here!)</li> <li>The section should introduce players to most mechanics in the game (obstacles and avatar movement)</li> </ul>"}]}