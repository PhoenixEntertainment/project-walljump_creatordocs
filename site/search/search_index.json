{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>e</p>"},{"location":"obstacles/","title":"Conveyor","text":"<p>Conveyors are a part that moves the player along with them, like a conveyor belt. They are a normal Part with a beam particle and an IntValue parented to them. The <code>IntValue</code> is used to control the speed of the conveyor. The higher the value, the faster the conveyor goes.</p> <p>Requirements: - The beam particle must be the one that's provided in the example below. Custom beam particles are not allowed at this time. - The conveyor must have a tag of \"Conveyor\"</p> <p>Rig:</p> <p></p> <p>Example : ExampleConveyor.rbxm</p>"},{"location":"obstacles/#damage-part","title":"Damage part","text":"<p>Damage parts are a normal BasePart that deals damage to a player if their hitbox comes into contact with it.</p> <p>Requirements: - The damage part must have a tag of \"DamagePart\" - The damage part must not have any textures applied to it, the animated damage textures will be added at runtime by the game - The damage part must have a transparency of 0 - The damage part must have a material of <code>Neon</code></p> <p>Example : ExampleLava.rbxm</p>"},{"location":"obstacles/#disappearing-platforms","title":"Disappearing platforms","text":"<p>Disappearing platforms are a Model containing numbered sub-<code>model</code>s, which contain sets of Parts that disappear and reappear in an ordered sequence, with a NumberValue parented to the root which controls the delay between appearing and disappearing.</p> <p>Rig:</p> <p></p> <p>Requirements: - The disappearing platform sequence must have a tag of \"DisappearingPlatforms\" - The disappearing platform sequence must contain at least one sequence model - The platform parts cannot have any textures applied to them, the textures will be applied at runtime by the game - The platform parts must have a partshape of <code>Block</code></p> <p>Example : ExampleDisappearingPlatforms.rbxm</p>"},{"location":"obstacles/#falling-platforms","title":"Falling platforms","text":"<p>Falling platforms are a Part with a beam particle and a crack decal that shakes &amp; falls upon being stepped on by a player with a particle and texture parented to them. The delay before falling &amp; speed of the fall cannot be custom-defined at this time.</p> <p>Rig:</p> <p></p> <p>Requirements: - The falling platform must have a tag of \"FallingPlatform\" - The texture &amp; particles must be the ones that are provided in the example below. Custom particles &amp; crack textures are not allowed at this time. - The particle must match the color of the falling platform. - Falling platforms must be anchored - Falling platforms cannot be moved (e.g. they cannot be a projectile)</p> <p>Example : ExampleFallingPlatforms.rbxm</p>"},{"location":"obstacles/#moving-platforms","title":"Moving platforms","text":"<p>Moving platforms are a Model containing a Part that moves between two node Parts. The main platform part contains an IntValue to control the platform's speed, and a NumberValue to control the delay between move.</p> <p>Rig:</p> <p></p> <p>Requirements: - The moving platform's model must have a tag of \"MovingPlatform\" - The two node parts must be anchored and invisible - The two node parts cannot move (e.g. they cannot be a projectile) - The primary platform part must be anchored, it will be unanchored at runtime by the game - The primary platform cannot be moved by another obstacle (e.g. they cannot be a projectile) - The beam particle from the example must be present in the model and linking the two nodes together - The first node part must be named \"One\" - The second node part must be named \"Two\"</p> <p>Example : ExampleMovingPlatforms.rbxm</p>"},{"location":"obstacles/#projectiles","title":"Projectiles","text":"<p>Projectiles are a Model containing sub-<code>model</code>s, which contain a BasePart that is created at a point, and then translated away in a specific direction at a certain speed for some time. The delay before firing, the projectile speed and how far it goes (in studs) are determined by NumberValue instances parented to the primary projectile part.</p> <p>Rig:</p> <p></p> <p>Requirements: - The projectilegroup model must have a tag of \"ProjectileGroup\" - The projectiles inside of the projectilegroup model must have a BasePart named \"Start\". This part must be anchored and must be CFramed to face the direction you want the projectile to move in. - The projectile must be named \"Main\" - The projectile must be anchored</p> <p>Example : ExampleProjectiles.rbxm</p>"},{"location":"obstacles/#spinners","title":"Spinners","text":"<p>Spinners are a Model containing a physics assembly that relies on HingeConstraints to keep the assembly together &amp; spinning. Unlike most obstacles, spinners have no structure requirements, other than the root being a model, and there being at least one <code>HingeConstraint</code> existing as a descendent of the model.</p> <p>Requirements: - The spinner's model must have a tag of \"SpinnerRig\"</p> <p>Example : ExampleSpinners.rbxm</p>"},{"location":"obstacles/#switch-panels","title":"Switch panels","text":"<p>Switch panels are a Model with a <code>PrimaryPart</code>, which contains a HingeConstraint to flip its associated physics assembly back and forth when a player performs a singlejump.</p> <p>Requirements: - Custom switch panels are not allowed at this time. The switch panel from the creator's kit must be used.</p> <p>Example : ExampleSwitchPanel.rbxm</p>"},{"location":"obstacles/#teleporter-group","title":"Teleporter group","text":"<p>Teleporter groups are a Model containing a set of sub-<code>model</code>s that represent nodes in the teleporter group.</p> <p>Nodes have different modes that can be configured with attributes. The two modes are <code>Sender</code> and <code>Receiver</code>. If a node is configured as a <code>Sender</code>, it must have an additional attribute named <code>DestinationName</code>. The <code>DestinationName</code>'s value must exactly match the name of another node model in the teleportergroup. Upon being touched by a player, the player will be teleported to the destination node. If a node is configured as a <code>Receiver</code>, it will simply do nothing upon being touched by a player.</p> <p>Two-way teleports are supported. If a <code>Sender</code> sends the player to another <code>Sender</code>, the receiving sender will be disabled until the player steps off of the node.</p> <p>Rig:</p> <p></p> <p>Requirements: - Teleporter nodes must be copied from the creator's kit. Custom-built teleporter nodes are not allowed at this time. - Teleporter nodes must be anchored - Teleporter nodes cannot move (e.g. they cannot be a projectile)</p> <p>Example : ExampleTeleporterGroup.rbxm</p>"},{"location":"obstacles/#trampolines","title":"Trampolines","text":"<p>Trampolines are a BasePart that bounces the player upwards upon being stepped on. The height that the player is bounced is configured by a IntValue parented to the trampoline's part.</p> <p>Rig:</p> <p></p> <p>Requirements: - Trampolines must be copied from the creator's kit. Custom trampoline shapes / models are not allowed at this time</p> <p>Example : ExampleTrampoline.rbxm</p>"}]}